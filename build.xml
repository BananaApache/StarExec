<?xml version="1.0" encoding="UTF-8"?>

<!-- This build file must be configured for local use, using a file
     called local.properties, in this directory.  

     See example.local.properties in this directory for an example. -->


<!-- Starexec production build script. Author: Tyler Jensen, changes by Aaron Stump -->
<project name="starexec" default="war" basedir=".">

        <loadproperties srcFile="local.properties"/>

	<!-- Set up path information for use throughout this script -->
	<property name="project-name" value="${ant.project.name}" />	
	<property name="war-file-name" value="${project-name}.war" />
	<property name="source-directory" value="src" />
	<property name="scripts-directory" value="scripts-common" />
	<property name="build-directory" value="build" />
	<property name="class-directory" value="${build-directory}/classes" />		
	<property name="config-directory" value="${class-directory}/org/starexec/config" />
	<property name="pics-dir" value="${data_dir}/pictures" />
	<property name="batch-dir" value="${data_dir}/batchSpace" />
	<property name="web-inf" value="WebContent/WEB-INF" />		
	<property name="meta-inf" value="WebContent/META-INF" />		
	
	<!-- Tell java where to look for JAR files while compiling (our application lib and the apache lib) -->
	<path id="classpath">
        <fileset dir="${web-inf}/lib" includes="**/*.jar"/>
		<fileset dir="${tomcat-dir}/lib" includes="**/*.jar"/>
    </path>
	
	<!-- Action for compiling the project and building the WAR file.

             1. we first compile the Java sources and copy over scripts and
                configurations to ${build-directory}.
             2. then we rewrite some of the configurations, using information
	        from local.properties.
         -->
	<target name="war" depends="">		
		<!-- Register commands and create build timestamp for build properties file -->
		<tstamp>
	        <format property="builtat" pattern="MM/dd/yyyy hh:mm:ss aa" />
	    </tstamp>        
	    <exec executable="svnversion" outputproperty="svnversion"/>
	    <exec executable="whoami" outputproperty="whoami"/>
		
		<!-- Clear the build directory if it exists and re-make the dir -->
		<delete dir="${build-directory}" />
		<mkdir dir="${build-directory}" />
		<mkdir dir="${class-directory}" />

		<!-- Compile the source code to get the java classes -->
		<javac srcdir="src" destdir="${class-directory}" classpathref="classpath" nowarn="on">
			<compilerarg value="-Xlint:unchecked"/>
		</javac>
		
		<!-- Copy over the org.starexec.config folder from source to classes -->
		<mkdir dir="${class-directory}/org/starexec/config" />
		<copy todir="${class-directory}/org/starexec/config">
			<fileset dir="${source-directory}/org/starexec/config">
				<include name="**/*" />
			</fileset>
		</copy>		
		
		<!-- Copy over SQL files to the deployed-sql directory.  They are there for updating the
                     deployment.  They do not need to go in the WAR file. -->
		<mkdir dir="deployed-sql" />
		<copy todir="deployed-sql">
			<fileset dir="sql">
				<include name="**/*" />
			</fileset>
		</copy>		
		
                <!-- Copy the soft-deploy template and fill it in -->
		<delete file="soft-deploy.sh" />
                <copy file="${scripts-directory}/soft-deploy.template" tofile="soft-deploy.sh"/>
                <replaceregexp file="soft-deploy.sh" match="the_configuration" replace="${configuration}"/>
		<chmod file="soft-deploy.sh" perm="774"/>

                <!-- Copy the context template and fill it in -->
		<delete file="${meta-inf}/context.xml" />
                <copy file="context.template" tofile="${meta-inf}/context.xml"/>
                <replaceregexp file="${meta-inf}/context.xml" match="the_configuration" replace="${configuration}"/>
                <replaceregexp file="${meta-inf}/context.xml" match="/the_configuration" replace="/${configuration}"/>
                <replaceregexp file="${meta-inf}/context.xml" match="the_db_name" replace="${db_name}"/>
                <replaceregexp file="${meta-inf}/context.xml" match="the_connection_name" replace="${connection-name}"/>
                <replaceregexp file="${meta-inf}/context.xml" match="the_connection_password" replace="${connection-password}"/>

		<!-- Copy the sge scripts to their proper location -->		
		<copy todir="${sge-script-dir}">
			<fileset dir="${source-directory}/org/starexec/config/sge">
				<include name="**/*.bash" />
			</fileset>
		</copy>

		<!-- Change permissions of the new sge script files so sge can use them -->
		<chmod file="${sge-script-dir}/epilog.bash" perm="774"/>		
		<chmod file="${sge-script-dir}/prolog.bash" perm="774"/>		
		<chown file="${sge-script-dir}/prolog.bash" owner=":star-web" />
		<chown file="${sge-script-dir}/prolog.bash" owner=":star-web" />


		<copy todir="${batch-dir}" file="starexec_res/batch/batchSpaceSchema.xsd"/>

                <!-- Copy default pictures (how to do this more nicely with a loop in ant?) -->
                <mkdir dir="${pics-dir}/users"/>
                <copy todir="${pics-dir}/users" file="starexec_res/default-pics/users/Pic0.jpg"/>
                <mkdir dir="${pics-dir}/solvers"/>
                <copy todir="${pics-dir}/solvers" file="starexec_res/default-pics/solvers/Pic0.jpg"/>
                <mkdir dir="${pics-dir}/benchmarks"/>
                <copy todir="${pics-dir}/benchmarks" file="starexec_res/default-pics/benchmarks/Pic0.jpg"/>

		

		<!-- Create/update the build property file -->
	    <propertyfile file="${config-directory}/build.properties"
	        comment="This file contains automatically generated build metadata. DO NOT EDIT!">        
	        <entry key="buildtime" value="${builtat}"/>
	        <entry key="build" value="${svnversion}"/>
	        <entry key="builder" value="${whoami}"/>
	    </propertyfile>
		
		<!-- Update the starexec-config file to use the production configuration -->
		<replaceregexp file="${config-directory}/starexec-config.xml"
		               match="default=(.+)"
		               replace="default=&quot;${configuration}&quot;&gt;"
		               byline="false"
		/>
		
		<!-- Update the sql scripts to use the correct database -->
		<replaceregexp match="USE (.+);" replace="USE ${db_name};" byline="false">
			<fileset dir="deployed-sql" includes="**/*.sql"/>
		</replaceregexp>
		
		<!-- Update the sql schema to use the correct database -->
		<replaceregexp file="deployed-sql/StarSchema.sql" match="DROP DATABASE IF EXISTS (.+);" replace="DROP DATABASE IF EXISTS ${db_name};" byline="false" />
		<replaceregexp file="deployed-sql/StarSchema.sql" match="CREATE DATABASE (.+);" replace="CREATE DATABASE ${db_name};" byline="false" />
		
		<!-- Update the log4j config file to only record INFO level events  -->
		<propertyfile file="${config-directory}/log4j.properties" comment="This file has been modified by ANT">        
	        <entry key="log4j.rootLogger" value="${logging_levels}"/>
                <entry key="log4j.appender.STAREXEC.File" value="${catalina.base}/logs/${logfile_name}.log" />
  	        </propertyfile>
		
	
		<!-- Create the war file! -->		
		<war warfile="${war-file-name}" webxml="${web-inf}/web.xml">
			<classes dir="${class-directory}" />	
			<fileset dir="WebContent"/>
			<lib dir="${web-inf}/lib"/>			
		</war>
	</target>	


</project>